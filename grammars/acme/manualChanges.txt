To pass the tests in the ANTLR directory it is necessary to do a minor change in 


==== Minor Problems ====

* pegparser code:
  - Change the file extesion from 'dot' to 'acmetest' in the following line:
  util.testYes(dir .. '/yes/', 'dot', p)

* rule filename: pegparser could not handle the escape sequence '\\'. 
  - Solution: changed '\\' to just '\'
  
* rule IDENTIFIER: pegparser could not recognize '-' as a symbol of a character class
  - Original rule:
  IDENTIFIER   <-   [a-zA-Z] [a-zA-Z0-9_-]*
  
  - Solution:
  IDENTIFIER   <-   [a-zA-Z] ([a-zA-Z0-9_] / '-')*
  

==== Interesting (General) Problems ====


* Rule acmePortDeclaration:
  - Original rule in ANTLR:
  acmePortDeclaration
   : PORT identifier (COLON acmePortTypeRef (COMMA acmePortTypeRef)*)? ((SEMICOLON)? | (ASSIGN ((acmePortBody (SEMICOLON)?) | (NEW acmePortInstantiatedTypeRef (COMMA acmePortInstantiatedTypeRef)* ((SEMICOLON) | (EXTENDED WITH acmePortBody (SEMICOLON)?))))));

  - Problem: In the alternative ((SEMICOLON)? | (ASSIGN ...
  the first alternative (SEMICOLON)? matches the empty string.
  
  - Solution: Put SEMICOLON as the last alternative. Could try to do this automatically
  
  distinctVariableSetDeclaration <- COLON / SET_DECLARE

  acmePropertyValueDeclaration   <-   INTEGER_LITERAL   /  FLOATING_POINT_LITERAL


* Lexical elements which are prefixes of other ones:
  - INTEGER_LITERAL and FLOATING_POINT_LITERAL: this causes a conflict in rule
  literalConstant:
  literalConstant   <-   ((INTEGER_LITERAL )   /  (FLOATING_POINT_LITERAL ) ...
  
  - COLON and SET_DECLARE: this causes a conflict in rule variableSetDeclaration
  variableSetDeclaration   <-   (distinctVariableSetDeclaration   /  (identifier (COMMA identifier )* ((COLON   /  SET_DECLARE ) ...
    
    Changed rule COLON, rule SET_DECLARE remained the same:
    COLON   <-   ':' !'!'
    SET_DECLARE   <-   ':!'


  - Matching a keyword as an identifier and vice-versa: try to better understand the
  rules involved with this conflict
  Added a predicate to the following rules:
  IDENTIFIER   <-   !FORALL !SET !EXISTS !PORT [a-zA-Z] ([a-zA-Z0-9_] / '-')*
  PORT   <-   P O R T !([a-zA-Z0-9_] / '-')
  
  
  

* Rules related to COMMENT
  - ANTLR rules named LINE_COMMENT and BLOCK_COMMENT deal with comments,
    while in pegparser we should use rule COMMENT

  - Original ANTLR rule for BLOCK_COMMENT:
  BLOCK_COMMENT: '/*' .*? '*/'
  
  - Translation:
  BLOCK_COMMENT: '/*' .*? '*/'
  
  - Problem: This is a general problem. Expression .* consumes the remaining input
  and the matching of '*/' fails.
  
  - Solution: Use a predicate to test whether it is possible to match
  FIRST(p), where p is the expression that follows. 
  COMMENT   <-   '/*' (!'*/' .)* '*/'

  
  - Original ANTLR rule for LINE_COMMENT (auto):
  LINE_COMMENT: '//' ~ [\r\n]*
  
  - Translation (no problem, auto): a minor problem related to '\r' and '\n'
  LINE_COMMENT   <-   '//' (!(%nl) .)* %nl
  
  
* STRING_LITERAL
  - Same problem of BLOCK_COMMENT
  
  - Original ANTLR_RULE:
  STRING_LITERAL: '"' .*? '"'
  
  - Translation:
  STRING_LITERAL   <-   '"' .*? '"'

  - Solution:
  STRING_LITERAL   <-   '"' (!'"' .)* '"'


