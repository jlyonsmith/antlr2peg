To pass the tests in the ANTLR directory it is necessary to do a minor change in 


==== Minor Problems ====

* pegparser code:
  - Change the file extesion from 'dot' to 'acmetest' in the following line:
  util.testYes(dir .. '/yes/', 'dot', p)

* rule filename: pegparser could not handle the escape sequence '\\'. 
  - Solution: changed '\\' to just '\'
  
* rule IDENTIFIER: pegparser could not recognize '-' as a symbol of a character class
  - Original rule:
  IDENTIFIER   <-   [a-zA-Z] [a-zA-Z0-9_-]*
  
  - Solution:
  IDENTIFIER   <-   [a-zA-Z] ([a-zA-Z0-9_] / '-')*
  

==== Interesting (General) Problems ====


* Rule acmePortDeclaration:
  - Original rule in ANTLR:
  acmePortDeclaration
   : PORT identifier (COLON acmePortTypeRef (COMMA acmePortTypeRef)*)? ((SEMICOLON)? | (ASSIGN ((acmePortBody (SEMICOLON)?) | (NEW acmePortInstantiatedTypeRef (COMMA acmePortInstantiatedTypeRef)* ((SEMICOLON) | (EXTENDED WITH acmePortBody (SEMICOLON)?))))));

  - Problem: In the alternative ((SEMICOLON)? | (ASSIGN ...
  the first alternative (SEMICOLON)? matches the empty string.
  
  - Solution: Put SEMICOLON as the last alternative. Could try to do this automatically
  acmePortDeclaration   <-   PORT identifier (COLON acmePortTypeRef (COMMA acmePortTypeRef )* )? ((ASSIGN ((acmePortBody (SEMICOLON )? )   /  (NEW acmePortInstantiatedTypeRef (COMMA acmePortInstantiatedTypeRef )* ((SEMICOLON )   /  (EXTENDED WITH acmePortBody (SEMICOLON )? ) ) ) ) ) / (SEMICOLON )?)
  
  distinctVariableSetDeclaration <- COLON / SET_DECLARE

  acmePropertyValueDeclaration   <-   INTEGER_LITERAL   /  FLOATING_POINT_LITERAL


* Lexical elements which are prefixes of other ones:
  - INTEGER_LITERAL and FLOATING_POINT_LITERAL: this causes a conflict in rule
  literalConstant:
  literalConstant   <-   ((INTEGER_LITERAL )   /  (FLOATING_POINT_LITERAL ) ...
  
  SOLUTION: INTEGER_LITERAL   <-   [0-9]+ !'.'
  
  - COLON and SET_DECLARE: this causes a conflict in rule variableSetDeclaration
  variableSetDeclaration   <-   (distinctVariableSetDeclaration   /  (identifier (COMMA identifier )* ((COLON   /  SET_DECLARE ) ...
    
    Changed rule COLON, rule SET_DECLARE remained the same:
    COLON   <-   ':' !'!'
    SET_DECLARE   <-   ':!'


  - Matching a keyword as an identifier and vice-versa: try to better understand the
  rules involved with this conflict
  Added a predicate to the following rules:
  IDENTIFIER   <-   !FORALL !SET !EXISTS !PORT [a-zA-Z] ([a-zA-Z0-9_] / '-')*
  PORT   <-   P O R T !([a-zA-Z0-9_] / '-')
  
  = Explaining error related to IDENTIFIER and FORALL (code):
  - Acme exemple: invariant Forall c1 : ...
  
  Error when matching c1. The parser matches 'Forall' as an IDENTIFIER and fails maching 'c1' later.
  In rule designrule, there is a concatenation INVARIANT designRuleExpression. After matching
  INVARIANT, there is a long chain of non-terminals and the parser tries to match a primitiveExpression: 
  primitiveExpression   <-   literalConstant   /  reference   /  parentheticalExpression   /  setExpression   /  literalSequence   /  literalRecord   /  quantifiedExpression   /  sequenceExpression
  
  'Forall' is part of quantifiedExpression, but alternative reference (given below) matches first:
  reference   <-   identifier (DOT (identifier   /  (setReference ) ) )* (actualParams )? 

  
  = Explaining erro related to IDENTIFIER and EXISTS:    
  - Acme example: Exists t in types | 
  
  - Error similar to FORALL, as EXISTS is an alternative of rule quantifiedExpression

  - Explaining error related to IDENTIFIER and PORT:
    analysis numberOfPorts(c : component, t : type) : int = size(portsOfType(c, t));
  
  - Rule PORT wrongly matches a prefix os portsOfType.
    Rule acmeDesignAnalysisDeclaration should match. It has two alternatives, one ends
    with "ASSIGN designRuleExpression (acmePropertyBlock )? SEMICOLON )", and another
    one with "ASSIGN (codeLiteral   /  (identifier (DOT identifier )* ) ) SEMICOLON )".
    The first alternative matches. As mentioned before, there is a long chain of non-terminals from designRuleExpession to primitiveExpression: 
  primitiveExpression   <-   literalConstant   /  reference   /  parentheticalExpression   /  setExpression   /  literalSequence   /  literalRecord   /  quantifiedExpression   /  sequenceExpression
  
    The input 'portsOfType' is a valid reference, but PORT is a literal constant, so the first alternative of primitiveExpression wrongly matches.
  
  - Solution: PORT   <-   P O R T  !([a-zA-Z0-9_] / '-')
  
  
  = Explaining error related to IDENTIFIER and SET (code):
   analysis mustBeOfType(types : set {type}) : boolean =
   
  - Error when matching '{'. The parser wrongly matches 'set' as an IDENTIFIER.
  Original rule: acmeDesignAnalysisDeclaration
  Let's follow from rule formalParam:
  formalParam   <-   identifier COLON acmeTypeRef 
  
  Rule acmeTypeRef is as follows:
  acmeTypeRef   <-   ((SYSTEM )   /  (COMPONENT )   /  (GROUP )   /  (CONNECTOR )   /  (PORT )   /  (ROLE )   /  (PROPERTY )   /  (ELEMENT )   /  (TYPE )   /  (REPRESENTATION )   /  (reference )   /  (acmePropertyTypeStructure ) ) 
   
  The last alternative, acmePropertyTypeStructure, recognizes 'set{type}', but alternative reference
  matches first, as 'set' is wrongly matched by rule identifier.
  
  = Erro related to matching an IDENTIFIER as an INTEGER
  - ACME: invariant Forall c : connector in self.connectors | declaresType(c, interLayerRequestT) ;
  
  - Problem: wrongly matches as INT a prefix of interLayerRequestT
  Related to rule primitiveExpression, as INT is a literalConstant
  
  - Solution: INT   <-   ((I N T)  /  (I N T E G E R)) !([a-zA-Z0-9_] / '-')
  


* Rules related to COMMENT
  - ANTLR rules named LINE_COMMENT and BLOCK_COMMENT deal with comments,
    while in pegparser we should use rule COMMENT

  - Original ANTLR rule for BLOCK_COMMENT:
  BLOCK_COMMENT: '/*' .*? '*/'
  
  - Translation:
  BLOCK_COMMENT: '/*' .*? '*/'
  
  - Problem: This is a general problem. Expression .* consumes the remaining input
  and the matching of '*/' fails.
  
  - Solution: Use a predicate to test whether it is possible to match
  FIRST(p), where p is the expression that follows. 
  COMMENT   <-   '/*' (!'*/' .)* '*/'

  
  - Original ANTLR rule for LINE_COMMENT (auto):
  LINE_COMMENT: '//' ~ [\r\n]*
  
  - Translation (no problem, auto): a minor problem related to '\r' and '\n'
  LINE_COMMENT   <-   '//' (!(%nl) .)* %nl
  
  
* STRING_LITERAL
  - Same problem of BLOCK_COMMENT
  
  - Original ANTLR_RULE:
  STRING_LITERAL: '"' .*? '"'
  
  - Translation:
  STRING_LITERAL   <-   '"' .*? '"'

  - Solution:
  STRING_LITERAL   <-   '"' (!'"' .)* '"'


