To pass the tests in the ANTLR directory it is necessary to change only rules stmt and STRING.

* Rule stmt
  - Original rule
  stmt <- node_stmt / edge_stmt / attr_stmt / id '=' id / subgraph
  
  - Problem: id \in L(node_stmt)  and  id s1 \in L(edge_stmt), L(id '=' id)
  - Problem (this conflict does not seem to cause a problem): SUBGRAPH \in L(edge_stmt), L(subgraph)
            
  - Solution: put alternatives "id '=' id" and "edge_stmt" before "node_stmt"
  stmt <- id '=' id / edge_stmt / node_stmt / attr_stmt / subgraph
  
  
* Rule STRING
  - Original rule in ANTLR
  STRING  :  '"' ( '\\"' | . )*? '"'
  
  - Translation:
  STRING  <-  '"' ('\\"'  /  .)*? '"'
  
  - Problem: This is a general problem. Expression .* consumes the remaining input
  and the matching of '"' fails. In ANTLR, pattern *? indicates a lazy repetition,
  thus an expression like e1*? e2 should be translated as: (!p2 p1)* p2
  Following this, the previous translation should be:
  STRING  <-  '"' (!'"' ('\\"'  /  .))* '"'
  
  I guess ANTLR did not use a negated charset because '\\"' is not a single char,
  so ~['"'] would not match '\\"'.
  
  - Solution: From ANTLR Reference (Section 15.6): "Such nongreedy
  subrules are allowed in both the parser and the lexer, but they are used much
  more frequently in the lexer."
  Let us consider only the lexical for a while.
  The simple translation would be as described above. Should we also consider
  the FLW set associated the lexical rule?
  I guess FLW set should not be considered, as ANTLR Reference, Section 5.5, pg 76,
  says that: "Nongreedy means essentially to “scarf
  characters until you see what follows the subrule in the lexer rule.” To be
  more precise, nongreedy subrules match the fewest number of characters
  while still allowing the entire surrounding rule to match."
  

* Rule COMMENT
  - Original ANTLR rule:
  COMMENT  :   '/*' .*? '*/'
  
  - Translation:
  COMMENT   <-   '/*' .*? '*/'
  
  - Problem: Same as in STRING
  
  - Solution:
  
  
* Rule LINE_COMMENT
  - Original ANTLR rule:
  LINE_COMMENT  :  '//' .*? '\r'? '\n'
  
  - Translation:
  LINE_COMMENT  <- '//' .*? '\r'? '\n'
  
  - Problem: Same as in STRING
  
  - Solution:
  
* Rules HTML_STRING and TAG:
  - Same problem of STRING
