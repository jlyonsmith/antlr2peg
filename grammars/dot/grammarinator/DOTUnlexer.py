# Generated by Grammarinator 19.3

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(range(83, 84), range(115, 116)))
charset_1 = list(chain(range(84, 85), range(116, 117)))
charset_2 = list(chain(range(82, 83), range(114, 115)))
charset_3 = list(chain(range(73, 74), range(105, 106)))
charset_4 = list(chain(range(67, 68), range(99, 100)))
charset_5 = list(chain(range(84, 85), range(116, 117)))
charset_6 = list(chain(range(71, 72), range(103, 104)))
charset_7 = list(chain(range(82, 83), range(114, 115)))
charset_8 = list(chain(range(65, 66), range(97, 98)))
charset_9 = list(chain(range(80, 81), range(112, 113)))
charset_10 = list(chain(range(72, 73), range(104, 105)))
charset_11 = list(chain(range(68, 69), range(100, 101)))
charset_12 = list(chain(range(73, 74), range(105, 106)))
charset_13 = list(chain(range(71, 72), range(103, 104)))
charset_14 = list(chain(range(82, 83), range(114, 115)))
charset_15 = list(chain(range(65, 66), range(97, 98)))
charset_16 = list(chain(range(80, 81), range(112, 113)))
charset_17 = list(chain(range(72, 73), range(104, 105)))
charset_18 = list(chain(range(78, 79), range(110, 111)))
charset_19 = list(chain(range(79, 80), range(111, 112)))
charset_20 = list(chain(range(68, 69), range(100, 101)))
charset_21 = list(chain(range(69, 70), range(101, 102)))
charset_22 = list(chain(range(69, 70), range(101, 102)))
charset_23 = list(chain(range(68, 69), range(100, 101)))
charset_24 = list(chain(range(71, 72), range(103, 104)))
charset_25 = list(chain(range(69, 70), range(101, 102)))
charset_26 = list(chain(range(83, 84), range(115, 116)))
charset_27 = list(chain(range(85, 86), range(117, 118)))
charset_28 = list(chain(range(66, 67), range(98, 99)))
charset_29 = list(chain(range(71, 72), range(103, 104)))
charset_30 = list(chain(range(82, 83), range(114, 115)))
charset_31 = list(chain(range(65, 66), range(97, 98)))
charset_32 = list(chain(range(80, 81), range(112, 113)))
charset_33 = list(chain(range(72, 73), range(104, 105)))
charset_34 = list(chain(range(48, 58)))
charset_35 = list(chain(range(97, 123), range(65, 91), range(128, 129), range(45, 46), range(255, 256), range(95, 96)))
charset_36 = list(chain(*multirange_diff(printable_unicode_ranges, [(60, 61),(62, 63)])))
charset_37 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14)])))
charset_38 = list(chain(range(32, 33), range(9, 10), range(10, 11), range(13, 14)))


class DOTUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf'), weights=None, cooldown=1.0):
        super(DOTUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.weights = weights or dict()
        self.cooldown = cooldown

    def EOF(self, *args, **kwargs):
        pass

    @depthcontrol
    def STRICT(self):
        current = self.create_node(UnlexerRule(name='STRICT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_0)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_1)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_2)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_3)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_4)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_5)))
        return current
    STRICT.min_depth = 0

    @depthcontrol
    def GRAPH(self):
        current = self.create_node(UnlexerRule(name='GRAPH'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_6)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_7)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_8)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_9)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_10)))
        return current
    GRAPH.min_depth = 0

    @depthcontrol
    def DIGRAPH(self):
        current = self.create_node(UnlexerRule(name='DIGRAPH'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_11)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_12)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_13)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_14)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_15)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_16)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_17)))
        return current
    DIGRAPH.min_depth = 0

    @depthcontrol
    def NODE(self):
        current = self.create_node(UnlexerRule(name='NODE'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_18)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_19)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_20)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_21)))
        return current
    NODE.min_depth = 0

    @depthcontrol
    def EDGE(self):
        current = self.create_node(UnlexerRule(name='EDGE'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_22)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_23)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_24)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_25)))
        return current
    EDGE.min_depth = 0

    @depthcontrol
    def SUBGRAPH(self):
        current = self.create_node(UnlexerRule(name='SUBGRAPH'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_26)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_27)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_28)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_29)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_30)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_31)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_32)))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_33)))
        return current
    SUBGRAPH.min_depth = 0

    @depthcontrol
    def NUMBER(self):
        current = self.create_node(UnlexerRule(name='NUMBER'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='-'))

        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_2', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_2', choice)] = self.unlexer.weights.get(('alt_2', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='.'))
            if self.unlexer.max_depth >= 0:
                for _ in self.one_or_more():
                    current += self.unlexer.DIGIT()

        elif choice == 1:
            if self.unlexer.max_depth >= 0:
                for _ in self.one_or_more():
                    current += self.unlexer.DIGIT()

            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='.'))
                    if self.unlexer.max_depth >= 1:
                        for _ in self.zero_or_more():
                            current += self.unlexer.DIGIT()


        return current
    NUMBER.min_depth = 1

    @depthcontrol
    def DIGIT(self):
        current = self.create_node(UnlexerRule(name='DIGIT'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_34)))
        return current
    DIGIT.min_depth = 0

    @depthcontrol
    def STRING(self):
        current = self.create_node(UnlexerRule(name='STRING'))
        current += self.create_node(UnlexerRule(src='"'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_11', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_11', choice)] = self.unlexer.weights.get(('alt_11', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.create_node(UnlexerRule(src='\\"'))
                elif choice == 1:
                    current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='"'))
        return current
    STRING.min_depth = 0

    @depthcontrol
    def ID(self):
        current = self.create_node(UnlexerRule(name='ID'))
        current += self.unlexer.LETTER()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_17', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_17', choice)] = self.unlexer.weights.get(('alt_17', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.LETTER()
                elif choice == 1:
                    current += self.unlexer.DIGIT()

        return current
    ID.min_depth = 1

    @depthcontrol
    def LETTER(self):
        current = self.create_node(UnlexerRule(name='LETTER'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_35)))
        return current
    LETTER.min_depth = 0

    @depthcontrol
    def HTML_STRING(self):
        current = self.create_node(UnlexerRule(name='HTML_STRING'))
        current += self.create_node(UnlexerRule(src='<'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [1, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_22', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_22', choice)] = self.unlexer.weights.get(('alt_22', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.unlexer.TAG()
                elif choice == 1:
                    current += UnlexerRule(src=self.char_from_list(charset_36))

        current += self.create_node(UnlexerRule(src='>'))
        return current
    HTML_STRING.min_depth = 0

    @depthcontrol
    def TAG(self):
        current = self.create_node(UnlexerRule(name='TAG'))
        current += self.create_node(UnlexerRule(src='<'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='>'))
        return current
    TAG.min_depth = 0

    @depthcontrol
    def COMMENT(self):
        current = self.create_node(UnlexerRule(name='COMMENT'))
        current += self.create_node(UnlexerRule(src='/*'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='*/'))
        return current
    COMMENT.min_depth = 0

    @depthcontrol
    def LINE_COMMENT(self):
        current = self.create_node(UnlexerRule(name='LINE_COMMENT'))
        current += self.create_node(UnlexerRule(src='//'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='\r'))

        current += self.create_node(UnlexerRule(src='\n'))
        return current
    LINE_COMMENT.min_depth = 0

    @depthcontrol
    def PREPROC(self):
        current = self.create_node(UnlexerRule(name='PREPROC'))
        current += self.create_node(UnlexerRule(src='#'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.char_from_list(charset_37))

        return current
    PREPROC.min_depth = 0

    @depthcontrol
    def WS(self):
        current = self.create_node(UnlexerRule(name='WS'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_38)))

        return current
    WS.min_depth = 0

